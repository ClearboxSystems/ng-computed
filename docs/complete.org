#+TITLE: ng-computed
#+AUTHOR: Carlo Zancanaro
#+OPTIONS: toc:1

Computed properties for [[http://angularjs.org/][AngularJS]], Ã  la [[http://knockoutjs.com/][Knockout JS]].

: bower install ng-computed

- [[#motivation][Motivation]]
- [[#hello-world-example][Hello World example]]
- [[#installation][Installation]]
- [[#usage][Usage]]
  - [[#extraction][Extraction]]
  - [[#transformations][Transformations]]
- [[#custom-behaviour][Custom behaviour]]
  - [[#watches][Watches]]
  - [[#extractors][Extractors]]
  - [[#long-lived-specifications][Long-lived specifications]]
- [[#debugging][Debugging]]
- [[#comparison-to-pure-angularjs][Comparison to pure AngularJS]]

* Motivation
#+NAME: #motivation

When writing applications within the AngularJS framework, it is often
necessary to compute values for scope properties which are dependent
on other scope values. AngularJS provides a basic mechanism to keep
these values up to date (~$watch~, and its variants), but these can
often become unwieldy as your dependencies become more complex or
dynamic.

This is the problem that =ng-computed= is aiming to solve. Within a
~$computed~ value's body it is not necessary to explicitly declare
what values you depend on, or when this value should be
re-evaluated. =ng-computed= will take care of all the details so you
can focus on your actual computation.

If you're not convinced that this is such a great idea, take a look at
[[#hello-world-example][the example below]] (and the example further linked from there). If
you're just interested in using =ng-computed= then [[#installation][installation is
probably the best place to start]].

* Hello World Example
#+NAME: #hello-world-example

#+BEGIN_SRC js :tangle test.js
  angular.module('app', ['ngComputed', 'ng'])
      .controller('HelloWorldController', function($scope, $computed, $trackedEval) {
          angular.extend($scope, {$computed: $computed, $eval: $trackedEval});
          $scope.hello = "hello";
          $scope.world = "world";
          $scope.$computed("helloWorld", function() {
              return $scope.$eval("hello") + " " + $scope.$eval("world") + "!";
          });
      });
#+END_SRC

~$scope.helloWorld~ will be kept updated by the usual AngularJS watch
mechanisms, and it will be recalculated whenever the values of
~$scope.hello~ or ~$scope.world~ change.

For a more complete example, see [[#comparison-to-pure-angularjs][the comparative example below]].

* Installation
#+NAME: #installation

There are a few options for how to set up =ng-computed= in your
project. Throughout the documentation we're assuming you've opted for
/Globally Available/ and /Overriding Scope.$eval/.

** Globally available

We can add the ~$computed~ and ~$trackedEval~ methods at the
top-level of our application, on the ~Scope~ prototype. This makes
them readily available to any scopes, including isolate scopes. When
placing values on the ~Scope~ prototype we have another decision to
make: do we want to replace ~Scope.$eval~.

*** Overriding ~Scope.$eval~

The ~$trackedEval~ service gives you a drop-in replacement for
~Scope.$eval~, so we can replace ~Scope.$eval~ with ~$trackedEval~
without breaking anything.

#+BEGIN_SRC js
  angular.module('app', ['ngComputed', 'ng'])
      .run(function($rootScope, $trackedEval, $computed) {
          // we have to use the prototype, otherwise isolate scopes miss out
          angular.extend($rootScope.constructor.prototype, {
              $eval: $trackedEval,
              $computed: $computed
          });
      });
#+END_SRC

*** Not overriding ~Scope.$eval~

If you don't want to override ~Scope.$eval~ then you can choose a
different name instead. =ng-computed= makes no assumptions about what
names you use in your application.

#+BEGIN_SRC js
  angular.module('app', ['ngComputed', 'ng'])
      .run(function($rootScope, $trackedEval, $computed) {
          // we have to use the prototype, otherwise isolate scopes miss out
          angular.extend($rootScope.constructor.prototype, {
              getExpressionValue: $trackedEval,
              computedProperty: $computed
          });
      });
#+END_SRC

** Locally available

If you don't want to add ~$computed~ or ~$trackedEval~ to the ~Scope~
prototype then you can still use =ng-computed=. Within any scope you
can add ~$computed~ and ~$trackedEval~, using any names you desire,
and they will function normally.

#+BEGIN_SRC js
  angular.module('app', ['ngComputed', 'ng'])
      .controller('ExampleController', function($scope, $trackedEval, $computed) {
          $scope.$eval = $trackedEval;
          $scope.$computed = $computed;
      });
#+END_SRC

* Usage
#+NAME: #usage

Using =ng-computed= is quite simple. When you wish to create a
computed property, call ~$computed~ with the property's name (as a
string) and a specification of how to calculate the value (usually a
function, but see the section on [[#transformations][Transformations]] below). Based on the
specification, then, the value for the expressions is set.

Here is an example of a ~$computed~ property being set to a constant
value: ~10~.
#+BEGIN_SRC js
  $scope.$computed('computedExpression', function() {
      return 10;
  });
#+END_SRC

But setting constants isn't really interesting. We can already do
that. It's far more interesting to use ~$computed~ to calculate
values which depend on other things! In order to tell ~$computed~
about the dependency, we always retrieve values using ~$trackedEval~
(which, in our case, is available as ~$scope.$eval~):

#+BEGIN_SRC js
  $scope.firstName = "George";
  $scope.surname = "Clooney";
  $scope.$computed('fullName', function() {
      return $scope.$eval('firstName')
          + " "
          + $scope.$eval('surname');
  });
#+END_SRC

Now we have a value which will keep itself updated! If we modify
~$scope.firstName~ and ~$scope.surname~, ~$scope.fullName~ will be
updated as well.

** A small aside concerning purity

It's important to make sure that the specification that you provide to
~$computed~ is *almost [[https://en.wikipedia.org/wiki/Pure_function#Pure_expressions][pure]]*. What we mean by almost pure is that the
function must give the same result given the same arguments, but only
if you also consider the result of each ~$trackedEval~ invocation as
an additional (implicit) argument. Almost pure functions should also
have no side effects.

In our example from above, the function calculating ~$scope.fullName~
has no formal arguments (as is common for computed properties), but it
has two implicit arguments: ~$scope.firstName~ and
~$scope.surname~. Therefore when ~$scope.firstName~ changes we can
imagine our function being re-invoked with different arguments.

Specifications should be *almost pure* because they may be invoked at
unexpected times, or in unexpected ways. =ng-computed= makes no
guarantees about how many times a specification is invoked (although
an attempt is made to minimise the number of invocations).

** Extraction
#+NAME: #extraction

When dealing with some types of data it's not possible to return a
simple value type from a specification. In cases like asynchronous
code it is often necessary to return some sort of a promise object
which will be eventually resolved elsewhere. As a help for dealing
with these cases, values returned by specifications undergo
/extraction/ before being used.

By default, extraction consists of either returning the value as-is,
or returning the value delivered by a ~$q~ promise. This extraction
process can be customised, as is discussed in [[#extractors][Extractors]].

An example of the default behaviour of ~$computed~:

#+BEGIN_SRC js
  $scope.url = "http://google.com";
  $scope.$computed('requestResult', function() {
      return $http.get($scope.$eval('url'));
  });
#+END_SRC

Here the value of ~$scope.requestResult~ will be set to the result of
fetching the URL specified in ~$scope.url~. As ~$scope.url~ changes,
new requests will be made and ~$scope.requestResult~ will be updated
accordingly.

** Transformations
#+NAME: #transformations

There are some occasions when calculating a value is a little bit more
involved than simply concatenating two strings looked up off the
scope. Sometimes a value must be computed by an application of various
functions in sequence. In cases like this we can use
/transformations/.

If ~$computed~ is given an array of functions as a specification, it
will run through each of them in sequence, calling each function with
the result of the previous one in the chain, and finally setting the
scope property to the result of the final function.

#+BEGIN_SRC js
  $scope.value = 10;
  $scope.$computed('valuePlusThree', [function() {
      return $scope.$eval('value');
  }, function(x) {
      return x+2;
  }, function(x) {
      return x+1;
  }]);
#+END_SRC

Here ~$scope.valuePlusThree~ is set to ~13~, and will continue to
update as ~value~ is updated. This example doesn't do anything that
we couldn't have done in one function, however. There's no reason why
we couldn't have used ~$scope.$eval('value') + 3~, so transformations
provide us with no benefit here.

Transformations do provide us with two advantages over simply calling
and composing functions, though:

1. Each function in a transformation has dependencies tracked
   separately

   This means that when a value changes, only the functions from that
   point down are re-evaluated (and even then, only if the preceding
   values have changed).

   #+BEGIN_SRC js
     $scope.a = 3;
     $scope.b = 5;
     $scope.c = 23;
     $scope.$computed('sumIsEven', [function() {
         return $scope.$eval('a') % 2; /* 1 */
     }, function(prev) {
         return (prev + $scope.$eval('b')) % 2; /* 2 */
     }, function(prev) {
         return (prev + $scope.$eval('c')) % 2; /* 3 */
     }, function(val) {
         return val == 0; /* 4 */
     }]);
   #+END_SRC

   In this case, ~$scope.sumIsEven~ will be set to true if the
   properties ~a~, ~b~ and ~c~ on ~$scope~ sum together to be an even
   number, and false otherwise. When any of ~a~, ~b~ or ~c~ change
   then their step of the function is re-run. If the value has changed
   then the next step of the chain is invoked, and so on.

   If ~$scope.a~ were to be set to ~5~, the line marked as =1= would be
   re-run, but ~$scope.a~ would still be odd, and thus no further
   processing would take place.

   If ~$scope.b~ were to be set to ~6~ the line marked as =2= would be
   re-run, followed by =3=, then =4=. At the completion of line =4=
   ~$scope.sumIsEven~ would be set to ~false~.

   This automatic tracking and re-invocation of dependencies for
   separate steps in a computation can give significant performance
   benefits in some circumstances.

2. Each result in a transformation is extracted before being passed
   to the following function

   This means you can chain together asynchronous computations in a
   natural way:

   #+BEGIN_SRC js
     $scope.url = "http://google.com";
     $scope.$computed('uppercasePageContents', [function() {
         return $http.get($scope.$eval('url'));
     }, function(response) {
         return (response.data || "").toUpperCase(); // always shouting
     }]);
   #+END_SRC

Combining these two points can allow for complex calculations and
logic to be captured within a series of transformations while
=ng-computed= does all the work of making sure each step is re-run at
an appropriate time.

* Custom behaviour
#+NAME: #custom-behaviour

** Watches
#+NAME: #watches

By default, ~$trackedEval~ tracks all dependencies as *deep equality*
watches. This can be quite inefficient, especially for dependencies
on large objects, so =ng-computed= provides two tools to help:

1. ~$watch~ batching

   Shipped along with =ng-computed= is a service called
   ~$batchedWatch~ which is a drop-in replacement for ~Scope.$watch~.
   ~$batchedWatch~ can be used as ~$watch~ on the ~Scope~ prototype,
   or on any individual scope, and will batch together separate watch
   functions on the same expression. This means that multiple deep
   watches on the same large object will incur only one ~angular.copy~
   / ~angular.equals~ per change.

   #+BEGIN_SRC js
     angular.module('app', ['ngComputed', 'ng'])
         .run(function($rootScope, $batchedWatch) {
             $rootScope.constructor.prototype.$watch = $batchedWatch;
         });
   #+END_SRC

2. ~$eval{Reference,Equal,Collection}~

   The ~$trackedEval~ service is not just a simple function. There
   are three variations of ~$trackedEval~ which each track the
   dependency as one of the varieties of watch:

   * ~$evalReference~, as a reference watch
   * ~$evalEqual~, as a deep equality watch
   * ~$evalCollection~, as a collection watch

   These can be placed on a scope and used as normal:

   #+BEGIN_SRC js
     angular.module('app', ['ngComputed', 'ng'])
         .controller('Example', function($scope, $trackedEval) {
             $scope.$evalReference = $trackedEval.$evalReference;
             $scope.$computed('computedValue', function() {
                 return $scope.$evalReference('shallowWatchedValue');
             });
         });
   #+END_SRC

   By default, ~$trackedEval~ is the ~$evalEqual~ function, but it
   can be configured using AngularJS's configuration mechanism:

   #+BEGIN_SRC js
     angular.module('app', ['ngComputed', 'ng'])
         .config(['$trackedEvalProvider', function($trackedEvalProvider) {
             $trackedEvalProvider.setDefaultWatchType('equal' /* or 'reference' or 'collection'*/);
         }]);
   #+END_SRC

** Extractors
#+NAME: #extractors

Often when a value is returned for a ~$computed~ property there is
some more work to be done: the value needs to be /extracted/ from some
sort of context. This may be from a asynchronous construct, such as a
promise, or from some other wrapper structure of your own devising. In
order to allow for easy use of such values, =ng-computed= has a
concept of an /extractor/.

An extractor is a function which is called to retrieve a value from a
container. The function is given the value returned to ~$computed~ and
a callback into which to deliver the value. The callback may be called
as many times as desired, and each time it is called it will continue
the evaluation of the ~$computed~ value (this may be simply setting it
on the scope, or may result in further computation [see
[[#transformations][Transformations]] for more details]).

*** Default configuration

By default, ~$computed~ will extract a value from a ~$q~ promise if
one is returned from the computed function.

#+BEGIN_SRC js
  $scope.$computed('extracted', function() {
      var deferred = $q.defer();
      deferred.resolve('a value'); // could happen later
      return deferred.promise;
  });
#+END_SRC

To serve as an example for custom extractors, this is how one would
specify the default extractor:

#+BEGIN_SRC js
  angular.module('app', ['ngComputed', 'ng'])
      .config(['$computedProvider', function($computedProvider) {
          $computedProvider.provideExtractor(['$q', function($q) {
              return function(value, callback) {
                  $q.when(value).then(callback, callback);
              };
          }]);
      }]);
#+END_SRC

This does not need to be done, however, as =ng-computed= will use
this extractor if no other extractor is specified.

*** Custom configuration

One possible form of an extractor will attempt to extract values from
"thunks". A thunk can be modelled as a function with zero arguments,
which must be invoked to retrieve the value it contains.

An extractor which dereferences thunks for ~$computed~ properties can
be easily implemented:

#+BEGIN_SRC js
  angular.module('app', ['ngComputed', 'ng'])
      .config(['$computedProvider', function($computedProvider) {
          $computedProvider.provideExtractor([function() {
              return function(value, callback) {
                  // because these are each called synchronously,
                  // they are already in a $digest cycle
                  if (angular.isFunction(value)) {
                      callback(value());
                  } else {
                      callback(value);
                  }
              };
          }]);
      }]);
#+END_SRC

If our application is configured with this extractor then the
following ~$computed~ property will be set to the value ~10~.

#+BEGIN_SRC js
  $scope.$computed('value', function() {
      return function(){return 10;};
  });
#+END_SRC

*** Asynchronous extractors

Asynchronous extractors have a few behaviours which may be unexpected,
and may have unintended consequences. These should be taken into
account when writing extractors for asynchronous results.

1. It is the extractor's responsibility to ensure that *any changes
   are processed after extraction*. The extractor may assume that it
   will have been invoked during the ~$apply~ or ~$digest~ phase.

   Essentially this means that whenever you are invoking ~callback~
   asynchronously you must ensure that it is run within a
   ~$rootScope.$apply~, or similar:

   #+BEGIN_SRC js
     $rootScope.$apply(function() {
         callback(value);
     });
   #+END_SRC

   This is usually not a problem when using AngularJS services (such
   as ~$q~ or ~$timeout~), but when using third-party promises or
   other callback mechanisms it can become an issue.

2. The ~callback~ provided to extractors is only valid until the
   function calculating ~value~ is invoked again. If the ~callback~
   is invoked after that time then it will have no effect.

   The intention behind this decision is to avoid the case where an
   earlier, but now irrelevant, promise being resolved overwrites a
   newer, relevant, promise's value. An example will hopefully make
   this clear:

   #+BEGIN_SRC js
     var deferredA = $q.defer(), deferredB = $q.defer();
     
     $scope.$apply(function() {
         $scope.useA = true;
         $scope.$computed('extractedValue', function() {
             if ($scope.$eval('useA'))
                 return deferredA.promise;
             else
                 return deferredB.promise;
         });
     });
     
     // we're now waiting for deferredA.promise
     
     $scope.$apply(function() {
         $scope.useA = false;
     });
     
     // now we've changed, and we want $scope.extractedValue
     // to take deferredB.promise's value
     
     $scope.$apply(function() {
         deferredB.resolve(100);
     });
     
     // Awesome! Now $scope.extractedValue ~~ 100
     
     $scope.$apply(function() {
         deferredA.resolve(0);
     });
     
     // Uh oh, now $scope.extractedValue ~~ 0
     // unless we've invalidated the old callback
   #+END_SRC

** Long-lived specifications
#+NAME: #long-lived-specifications

One thing which would be nice to have, and which =ng-computed= makes
relatively easy, would be to be able to have function which don't
only depend on scope properties, but also depend on other external
data sources.

As an example, imagine that we had a ~DB~ service. This service
provides us with an interface to query an external database through a
~query~ method. ~query~ returns to us a "promise" which can be
resolved multiple times, and it ensures that it is continuously
resolved with the correct, most up-to-date, value until we call
~deregister~ on the result.

#+BEGIN_SRC js
  var result = DB.query("some query spec");
  // use result
  result.then(function(x){console.log("query result", x)});
  // the above may be run multiple times,
  // each time printing a new log line
  // until this next line
  result.deregister();
#+END_SRC

This type of an API can be easily wrapped to fit into an
=ng-computed= specification:

#+BEGIN_SRC js
  DB.query = function(fn) {
      var lastQuerySpec = null;
      var lastResult = null;
      return function() {
          var querySpec = fn.apply(this, arguments);
          if (angular.equals(querySpec, lastQuerySpec)) {
              return lastResult;
          } else {
              if (lastResult != null) {
                  lastResult.deregister();
                  lastResult = null;
              }
              lastQuerySpec = angular.copy(querySpec);
              return (lastResult = DB.query(querySpec));
          }
      };
  };
#+END_SRC

Now we can use this ~query~ function to wrap a function which returns
a query spec, which is then run on the database, returning the
promise to ~$computed~ to extract:

#+BEGIN_SRC js
  var deregister = $scope.$computed('databaseValuePlusOne', [
      DB.query(function() {
          return "some sort of query spec";
      }),
      function(x) { return x + 1; }
  ]);
#+END_SRC

This implementation, however, has a slight bug: when our computed
property's ~deregister~ function is called, or when ~$scope~ is
destroyed, it will leak the ~lastResult~ inside ~query~ without
deregistering it first.

In order to solve problems like this ~$computed~ will run the
~destroy~ property of a specification object, if it exists, when it is
deregistered. This gives a specification a hook to clean up anything
it may have allocated.

This means that it's easy to fix our ~query~ function above:

#+BEGIN_SRC js
    DB.query = function(fn) {
        var lastQuerySpec = null;
        var lastResult = null;
        var finalFunction = function() {
            var querySpec = fn.apply(this, arguments);
            if (angular.equals(querySpec, lastQuerySpec)) {
                return lastResult;
            } else {
                if (lastResult != null) {
                    lastResult.deregister();
                    lastResult = null;
                }
                lastQuerySpec = angular.copy(querySpec);
                return (lastResult = DB.query(querySpec));
            }
        };
        finalFunction.destroy = function() {
            if (lastResult != null)
                lastResult.deregister();
        };
        return finalFunction;
    };
#+END_SRC

Now when a ~query(...)~ specification is deregistered it will make
sure it also deregisters its query, if it has one. This approach can
also work for poll-based systems, or any other long-lived resources.

* Debugging
#+NAME: #debugging

NOTE: The debug API is likely to change in future, so don't rely on
its functionality for production code.

=ng-computed=, in the process of managing dependencies, builds and
implicit dependency graph of your expressions. This dependency graph
can be made explicit by enabling the debug mode on ~$computed~:

#+BEGIN_SRC js
  angular.module('app', ['ng', 'ngComputed'])
      .config(function($computedProvider) {
          $computedProvider.useDebug(true);
      })
#+END_SRC

This enables the ~$computed.dependencyGraph()~ function, which will
return a javascript object specifying the dependencies. The structure
of this object is most easily demonstrated with a small example:

#+BEGIN_SRC js
  $scope.firstName = "George";
  $scope.surname = "Clooney";
  $scope.$computed("fullName", function() {
      return $scope.$eval("firstName") + " " + $scope.$eval("surname");
  });
#+END_SRC

This example will produce a dependency graph with the following value
(assume ~$scope.$id = 01C~):

#+BEGIN_SRC js
  {
      "01C|fullName#0": {
          "01C|firstName|equal": "George",
          "01C|surname|equal": "Clooney"
      }
  }
#+END_SRC

Top level expressions are encoded as =scopeId|expression#number=,
where =scopeId= is the id of the scope it's created on, =expression=
is the expression that is being written to, and =number= is the step
in the transformation sequence for this expression (see
[[#transformations][the section on transformations]] for more details).

Dependencies are encoded as =scopeId|expression|type=, where =scopeId=
is the id of the scope being watched, =expression= is the expression,
and =type= is the type of watch this dependency is (equal, reference
or collection).

The value at the end is the value which was taken last time
=$computed= evaluated that dependency. This should correspond to the
value it took at the last =$digest= cycle.

** Drawing dependencies

On the ~$computed~ service there is a method ~drawDependencies~ which
will draw a dependency graph for you. This function uses [[http://d3js.org/][d3]] to draw a
force-directed graph of the current state of the dependencies in your
application (and it will update in real-time as dependencies
change). This is a global view of all dependencies, not a view of any
one particular scope.

In order to avoid explicitly depending on =d3=, you must provide the
=d3= object to this method when you call it. An example invocation can
be found in the [[https://raw.githack.com/ClearboxSystems/ng-computed/master/examples/basic-example/index.html][basic example]] provided with =ng-computed=.

#+BEGIN_SRC js
  $scope.$computed.drawDependencies(d3, $element.find('svg')[0], {
      width: 500,
      height: 100
  });
#+END_SRC

At present the element provided as the second argument must be an
=svg= element, and the only options in the options map which are
meaningful are =width= and =height=. This function may be improved in
future, but it is not a priority.

* Comparison to pure AngularJS
#+NAME: #comparison-to-pure-angularjs

In order to compare the =ng-computed= approach with vanilla AngularJS,
let's build a simple application.

For this example we're going to be leveraging =ng-computed='s
automatic promise unwrapping and transformation functions to
demonstrate a simple and easily understood implementation of a short
specification.

** Specification

Our application will be a little toy application to display a file and
filter the lines which are shown. The user will be able to do five
things:

- Select a file to display from a list of files (static list of
  arbitrary files)
- Enter a string to filter the file's lines by
- Toggle whether the string match will be case sensitive (on the
  original file) or not
- Change the output case of the matches (unchanged, upper, lower)
- Freeze the filter output so future modifications to the form won't
  change the matching lines output

We're going to be working with a DOM that looks like this:

#+BEGIN_SRC html
  <div>
    <h2>pure AngularJS</h2>
    <div><label>Data:
        <select ng-model="url">
          <option value="./index.html">index.html</option>
          <option value="./names.txt">names</option>
          <option value="./nouns.txt">nouns</option>
        </select>
    </label></div>
    <div><label>Search: <input type="text" ng-model="search"></label></div>
    <div><label><input type="checkbox" ng-model="caseSensitive"> case sensitive</label></div>
    <div><label>Output case:
        <select ng-model="outputCase">
          <option value="default" selected>Leave unchanged</option>
          <option value="lower">Lowercase</option>
          <option value="upper">Uppercase</option>
        </select>
    </label></div>
    <div><button ng-click="stop()">Freeze output!</button></div>
    <div>
      <h2>Matching lines:</h2>
      <pre>
        <div ng-repeat="line in matchingLines track by $index">{{ line }}</div>
      </pre>
    </div>
  </div>
#+END_SRC

** Using pure AngularJS

To give some idea of how this could look, let's start by implementing
our specification in pure AngularJS. No =ng-computed= stuff here!

#+BEGIN_SRC js
  module.controller("PureController", function($scope, $http) {
      var fixCase = function(string) {
          if ($scope.caseSensitive)
              return string;
          return string.toLocaleLowerCase();
      };
  
      var recalculateMatches = function() {
          $scope.lines = $scope.lines || [];
          var term = fixCase($scope.search || "");
          $scope.matchingLines = $scope.lines.filter(function(line) {
              return fixCase(line).indexOf(term) > -1;
          }).map(function(line) {
              switch($scope.outputCase) {
              case "lower": return line.toLocaleLowerCase();
              case "upper": return line.toLocaleUpperCase();
              default: return line;
              };
          });
      };
  
      $scope.url = "./index.html";
      $scope.outputCase = "default";
      var watches = [
          $scope.$watch("url", function(url) {
              if (!url) {
                  $scope.lines = [];
                  recalculateMatches();
              } else  {
                  $http.get(url).then(function(response) {
                      $scope.lines = response.data.split("\n");
                      recalculateMatches();
                  });
              }
          }),
          $scope.$watch("search", recalculateMatches),
          $scope.$watch("caseSensitive", recalculateMatches),
          $scope.$watch("outputCase", recalculateMatches)
      ];
      $scope.stop = function() {
          watches.forEach(function(deregister) {
              deregister();
          });
      };
  });
#+END_SRC

This implements our specification, but it's not really pretty. All the
processing takes place in the ~recalculateMatches~ function, which
might have to do a bit more work than necessary because it doesn't
know which value has been updated. In particular, changing the value
of ~$scope.outputCase~ would require ~recalculateMatches~ to reprocess
the entire file from scratch.

In this case the cost of processing is relatively small, but that
extra work is being performed nonetheless.

** Using =ng-computed=

Now, let's have a look at what an implementation might look like with
~ng-computed~.

#+BEGIN_SRC js
  module.controller("ComputedController", function($scope, $http, $computed, $trackedEval) {
      angular.extend($scope, {$computed: $computed, $eval: $trackedEval});
      var fixCase = function(string) {
          if ($scope.$eval("caseSensitive"))
              return string;
          return string.toLocaleLowerCase();
      };
  
      $scope.url = "./index.html";
      $scope.outputCase = "default";
      $scope.stop = $scope.$computed("matchingLines", [function() {
          var url = $scope.$eval("url");
          if (!url) return {data: ""};
          return $http.get(url);
      }, function(response) {
          var lines = (response.data || "").split("\n");
          var term = fixCase($scope.$eval("search") || "");
          return lines.filter(function(line) {
              return fixCase(line).indexOf(term) > -1;
          });
      }, function(lines) {
          switch ($scope.$eval("outputCase")) {
          case "lower": return lines.map(function(line){return line.toLocaleLowerCase();});
          case "upper": return lines.map(function(line){return line.toLocaleUpperCase();});
          default: return lines;
          }
      }]);
  });
#+END_SRC

This has a few advantages over the pure AngularJS implementation:

- The only values which are stored on the scope are the values being
  used in the actual view. In particular, ~response~ and ~lines~ are
  both kept out of the scope (in the pure AngularJS the ~lines~ are
  stored on the scope as a temporary storage location)
- Dependencies are tracked automatically, so the function processing
  the ~$http~ response doesn't need to know that ~fixCase~ uses
  ~$scope.caseSensitive~ internally; this also avoids needing to
  explicitly register the watches separately to the computation itself
- Each of the functions given to ~$computed~ is only run if its
  dependencies (or arguments) have changed, meaning we can avoid
  reprocessing the entire file if we just want to change the case of
  the output
- A single deregistration function removes the entire computation
  (this makes implementing the last point in the specification much
  easier)

A pure AngularJS implementation could be written to fix some of these
issues, but particularly the point of automatic dependency management
is difficult to solve without an implementation similar to
=ng-computed=. As a practical note, writing this example with
=ng-computed= was relatively simple and had few errors, whereas
writing it in pure AngularJS resulted in a number of minor mistakes
which had to be corrected (forgetting to register watches, in
particular).

This example can be seen in practice at [[https://raw.githack.com/ClearboxSystems/ng-computed/master/examples/comparison/index.html][/examples/comparison/index.html]]

