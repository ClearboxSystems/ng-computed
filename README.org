#+TITLE: README

Welcome to "how to generate the =ng-computed= documentation"!

This documentation was last compiled using [[http://orgmode.org][org-mode]]
src_emacs-lisp{org-version} in [[http://www.gnu.org/software/emacs/][GNU emacs]]
src_emacs-lisp{emacs-version}. Just execute the "src" block below to
generate all the HTML files!

#+BEGIN_SRC emacs-lisp :results none
  (require 'org-publish)
  (require 'ox-html)

  (setq
   org-html-doctype "html5"
   org-publish-project-alist (let* ((root (file-name-directory (buffer-file-name)))
                                    (default-postamble (concat "<p class=\"author\">Author: %a (%e)</p>\n"
                                                               "<p class=\"creator\">%c</p>\n"
                                                               "<p class=\"github-link\"><a href=\"https://github.com/ClearboxSystems/ng-computed\">On Github</a></p>"))
                                    (base-project `(:html-postamble ,default-postamble

                                                    :html-head-include-default-style nil

                                                    :base-extension "org"
                                                    :publishing-function org-html-publish-to-html

                                                    :section-numbers nil
                                                    :with-toc nil

                                                    :author "Carlo Zancanaro"
                                                    :email "carlo@clearboxsystems.com.au"))
                                    (preamble (lambda (root-path)
                                                (concat "<a href=\"" root-path "index.html\">Introduction</a>"
                                                        "<a href=\"" root-path "pages/installation.html\">Installation</a>"
                                                        "<a href=\"" root-path "pages/debug.html\">Debug</a>")))
                                    (head (lambda (root-path)
                                            (concat "<link rel=\"stylesheet\" type=\"text/css\" href=\"" root-path "stylesheets/styles.css\">"
                                                    "<script src=\"" root-path "javascripts/angular.js\"></script>"
                                                    "<script src=\"" root-path "javascripts/ng-computed.min.js\"></script>
                                                     <script>
                                                       angular.element(document).ready(function() {
                                                         var elements = document.querySelectorAll(\"[ng-app]\");
                                                         for (var i = 1, l = elements.length; i < l; ++i) {
                                                           var e = elements[i];
                                                           angular.bootstrap(e, [angular.element(e).attr('ng-app')]);
                                                         }
                                                       });
                                                     </script>"))))
                               (list (append `("ng-computed:root"
                                               :base-directory ,root
                                               :publishing-directory ,root
                                               :html-preamble ,(funcall preamble "")
                                               :html-head ,(funcall head ""))
                                             base-project)
                                     (append `("ng-computed:pages" 
                                               :base-directory ,(concat root "pages")
                                               :publishing-directory ,(concat root "pages")
                                               :html-preamble ,(funcall preamble "../")
                                               :html-head ,(funcall head "../"))
                                             base-project)
                                     '("ng-computed" :components ("ng-computed:root" "ng-computed:pages")))))
  (add-to-list 'org-src-lang-modes
               '("html-example" . html))
  (add-to-list 'org-babel-load-languages
               '(html-example . t))
  (defvar org-babel-default-header-args:html-example
    '((:exports . "both")
      (:results . "html")))
  (defun org-babel-execute:html-example (body params)
    body)
  (provide 'ob-html-example)

  (add-to-list 'org-src-lang-modes
               '("js-example" . js))
  (add-to-list 'org-babel-load-languages
               '(js-example . t))
  (defvar org-babel-default-header-args:js-example
    '((:exports . "both")
      (:results . "html")))
  (defun org-babel-execute:js-example (body params)
    (concat "<script>\n(function(){" body "})()\n</script>"))
  (provide 'ob-js-example)

  (let ((old org-confirm-babel-evaluate))
    (org-publish-remove-all-timestamps)
    (setq org-confirm-babel-evaluate nil)
    (org-publish "ng-computed")
    (setq org-confirm-babel-evaluate old))

  ;; put your cursor here, then type C-c C-c, then answer yes if you're asked
#+END_SRC
